newModFit <- train(classe ~ ., data = newTraining, method="rf", prox=TRUE)
newModFit$finalModel
(3906 + 2656 + 2393 + 2248 + 2521 +1 + 2 + 2 + 2 + 2 + 4) / nrow(newtraining)
(3906 + 2656 + 2393 + 2248 + 2521 +1 + 2 + 2 + 2 + 2 + 4) / nrow(newTraining)
newModFit$finalModel$Importance
names(newModFit)
names(newModFit$finalModel)
newModFit$finalModel$importance
sort(newModFit$finalModel$importance, decreasing=TRUE)
class(newModFit$finalModel$importance)
newModFit$finalModel$importance[-order(newModFit$finalModel$importance$MeanDecreaseGini), ]
gi <- newModFit$finalModel$importance
class(gi)
gi
rownames(gi)
gi$predictor <- rownames(gi)
gi
gi <- newModFit$finalModel$importance
cbind(gi, rownames(gi))
class(gi)
gi
gi <- cbind(gi, rownames(gi))
class(gi)
gi[-order(as.numeric(gi$MeanDecreaseGini)), ]
gi[-order(as.numeric(gi)), ]
gi[-sort(as.numeric(gi$MeanDecreaseGini)), ]
gi[-sort(as.numeric(gi)), ]
gi <- newModFit$finalModel$importance
gi[sort(gi),]
gi[rank(gi),]
gi
head(sort(gi, decreasing=TRUE))
head(cbind(sort(gi, decreasing=TRUE), rowNames(sort(gi, decreasing=TRUE))))
head(cbind(sort(gi, decreasing=TRUE), rowNames(sort(gi, decreasing=TRUE))))
head(cbind(sort(gi, decreasing=TRUE), rownames(sort(gi, decreasing=TRUE))))
head(cbind(sort(gi, decreasing=TRUE), rownames(gi)[sort(gi, decreasing=TRUE),]))
head(cbind(sort(gi, decreasing=TRUE), rownames(gi)[sort(gi, decreasing=TRUE)]))
qplot(newTraining$raw_timestamp_part_1, y=newTraining$classe, colour=newTraining$classe, xlab="raw_timestamp_part_1", ylab="classe")
qplot(newTraining$num_window, y=newTraining$classe, colour=newTraining$classe, xlab="num_window", ylab="classe")
rm(gi)
rm(M)
rm(new)
rm(classes)
rem(predictable)
rm(predictable)
rm(temp)
rm(test)
rm(pred)
table(newValidation$classe, predict(newModFit, newdata=newValidation))
newPred <- predict(newModFit, newdata=testing[ , -columnsToRemove])
newPred
rm(modelFit)
rm(newModFit)
names(newTraining)
newColunsToRemove <- c(columnsToRemove, "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window")
newColumnsToRemove <- c(columnsToRemove, "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window")
finalColumnsToRemove <- c(columnsToRemove, "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window")
rm(newColumnsToRemove)
rm(newColunsToRemove)
finalTraining <- training[ , -finalColumnsToRemove]
finalColumnsToRemove
names(newTraining)
finalColumnsToRemove <- c(columnsToRemove, 1:6)
names(training)
finalColumnsToRemove <- c(columnsToRemove, 2:7)
finalTraining <- training[ , -finalColumnsToRemove]
finalValidation <- validation[ , -finalColumnsToRemove]
names(finalTraining)
finalForestFit <- train(classe ~ ., data = finalTraining, method="rf", prox=TRUE)
finalPred <- predict(finalForestFit, newdata=finalValidation)
finalPred <- predict(finalForestFit, newdata=testing[ , -finalColumnsToRemove])
finalPred
finalForestFit$finalModel
table(finalValidation$classe, predict(finalForestFit, newdata=finalValidation))
2+3+2+9+11+23+2
nrow(finalValidation)
1672+1127+1013+941+1080
+52
52/5885
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
randomForestFit <- train(y ~ ., data=vowel.train, method="rf")
boostedFit <- train(y ~ ., data=vowel.train, method="gbm")
table(vowel.test$y, predict(randomForestFit, newdata=vowel.test))
table(vowel.test$y, predict(boostedFit, newdata=vowel.test))
vowel.test$rfPred <- predict(randomForestFit, newdata=vowel.test)
vowel.test$bPred <- predict(boostedFit, newdata=vowel.test)
nrow(vowel.test)
nrow(vowel.test[vowel.test$y != vowel.test$rfPred, ]) / nrow(vowel.test)
nrow(vowel.test[vowel.test$y == vowel.test$rfPred, ]) / nrow(vowel.test)
nrow(vowel.test[vowel.test$y == vowel.test$bPred, ]) / nrow(vowel.test)
set.seed(33833)
?gbm
randomForestFit <- train(y ~ ., data=vowel.train, method="rf")
boostedFit <- train(y ~ ., data=vowel.train, method="gbm")
nrow(vowel.test[vowel.test$y == vowel.test$rfPred, ]) / nrow(vowel.test)
nrow(vowel.test[vowel.test$y == vowel.test$bPred, ]) / nrow(vowel.test)
vowel.test$rfPred <- predict(randomForestFit, newdata=vowel.test)
vowel.test$bPred <- predict(boostedFit, newdata=vowel.test)
nrow(vowel.test[vowel.test$y == vowel.test$rfPred, ]) / nrow(vowel.test)
nrow(vowel.test[vowel.test$y == vowel.test$bPred, ]) / nrow(vowel.test)
nrow(vowel.test[vowel.test$y == vowel.test$bPred & vowel.test$bPred == vowel.test$rfPred, ]) / nrow(vowel.test[vowel.test$bPred == vowel.test$rfPred])
nrow(vowel.test[vowel.test$y == vowel.test$bPred & vowel.test$bPred == vowel.test$rfPred, ]) / nrow(vowel.test[vowel.test$bPred == vowel.test$rfPred, ])
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfFit <- train(diagnosis ~ ., data=training, method="rf")
bFit <- train(diagnosis ~ ., data=training, method="bgm", verbose=FALSE)
bFit <- train(diagnosis ~ ., data=training, method="gbm", verbose=FALSE)
ldaFit <- train(diagnosis ~ ., data=training, method="lda")
predResults <- cbind(training$diagnosis, predict(rfFit, newdata=training), predict(bFit, newdata=training), predict(ldaFit, newdata=training))
predResults
training$diagnosis
predict(rfFit, newdata=training)
head(training)
predict(bFit, newdata=training)
predict(ldaFit, newdata=training)
rfFit$finalModel
rfFit$finalModel$importance
colNames(training)
names(training)
predict(rfFit, newdata=training)
training$diagnosis
rm(rfFit)
rfFit <- train(diagnosis ~ ., data=training, method="rf")
predict(rfFit)
?predict.randomForest
predict(rfFit, newdata=training)
packages.install("shiny")
packages.install("manipulate")
install.packages("shiny")
install.packages("manipulate")
install.packages("ets")
weights <- read.csv("Weights.csv")
setwd("D:/Data Science/Data Products/Project")
setwd("D:/Data Science/Data Products/Project")
weights <- read.csv("Weights.csv")
calories <- read.csv("Calories.csv")
head(weights)
class(weights$Date)
class(weights$Kilograms)
class(weights$LastTenDaysCalories)
?ts
nrow(weights)
weightTs <- ts(weights$Kilograms)
head(calories)
calorieTs <- ts(calories$Calories.consumed)
plot(weightTs)
plot(calorieTs)
plot(weightTs)
?lm
names(weights)
weights$DateNumber <- as.numeric(weights$Date)
head(weights)
lmFit <- lm(weight ~ DateNumber, data = weights)
lmFit <- lm(Kilograms ~ DateNumber, data = weights)
lmFit
?max
max(weights$DateNumber)
130 * 0.1388 + 4.03449
130 * 0.01388 + 4.03449
(130 * 0.01388 + 4.03449) * 2.2
names(lmFit)
lmFit$residuals
summary(lmFit)$sigma
summary(lmFit$sigma)
install.packages("grofit")
?grofit
library(grofit)
?grofit
calories$DateNumber <- as.numeric(calories$Date)
calFit <- lm(Calories.consumed ~ DateNumber, data=calories)
calFit
newDates <- c(80, 100, 120, 140)
predict(lm, newData = newDates)
predict(calFit, newData = newDates)
newDates
data.frame(newDates)
newDates <- data.frame(newDates)
newDates
names(newDates)
names(newDates) <- "DateNumber"
predict(calFit, newData = newDates)
predict.lm
?predict.lm
predict(calFit, newdata = newDates)
?grofit
data(grofit.data)
grofit.data
data(grofit.time)
grofit.time
install.packages("nls")
?grofit
plot(decompose(weigthTs))
plot(decompose(weightTs))
weightTs
?ts
?grofit
weights$DaysOld <- weights$DayNumber + 198
weights$DayNumber + 198
names(weights)
weights$DaysOld <- weights$DateNumber + 198
calTsTrain <- window(calorieTs, start=1, end=39)
calTsTest <- window(calorieTs, start=40, end=49)
weightTsTrain <- window(weightTs, start=1, end=50)
weightTsTest <- window(weightTs, start=51, end=60)
weightTrain <- weights[, 1:50]
weightTrain <- weights[1:50, ]
weightTest <- weights[51:60, ]
calMaFit <- ma(calTsTrain)
library(forecast)
calMaFit <- ma(calTsTrain)
?ma
calMaFit <- ma(calTsTrain, order=7)
?forecast
curve <- gcFitModel(time=weightTrain$DaysOld, data=weightTrain$Kilograms)
help(gcFitModel)
library(nls)
install.packages(nls)
install.packages("nls")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
?nls
unload(stats)
detach("package:stats", unload=TRUE)
install.packages("stats")
library(stats)
nls
?nls
curve <- gcFitModel(time=weightTrain$DaysOld, data=weightTrain$Kilograms)
library(grofit)
curve <- gcFitModel(time=weightTrain$DaysOld, data=weightTrain$Kilograms)
curve
?gcFitModel
flot(gcFitModel)
plot(gcFitModel)
x <- 1:30
y <- 1/(1+exp(0.5*(15-x)))+rnorm(30)/20
TestRun <- gcFitModel(x,y)
print(summary(TestRun))
plot(TestRun)
print(summary(gcFitModel))
rm(grofit.data)
rm(grofit.time)
rm(TestRun)
print(summary(curve))
predict(curve, newdata=c(280,300,320))
plotpoints <- c(180, 200, 220, 240, 260, 280)
names(curve)
curve.model
curve$model
curve$parameters
curve$parameters$A$Estimate
curve$parameters$A
curve$parameters$A[1]
?gompertz
curvePoints <- gompertz(plotpoints, curve$parameters$A[1], curve$parameters$mu[1], curve$parameters$lambda)
plot(plotpoints ~ curvePoints)
plot(curvePoints ~ plotpoints)
plotpoints <- c(180, 200, 220, 240, 260, 280, 300, 320)
curvePoints <- gompertz(plotpoints, curve$parameters$A[1], curve$parameters$mu[1], curve$parameters$lambda)
plot(curvePoints ~ plotpoints)
curve$parameters
curvePoints <- gompertz(plotpoints, curve$parameters$A[1] + curve$parameters$A[2], curve$parameters$mu[1] + curve$parameters$mu[2], curve$parameters$lambda[1] + curve$parameters$lambda[2])
plot(curvePoints ~ plotpoints)
curvePoints <- gompertz(plotpoints, curve$parameters$A[1] - curve$parameters$A[2], curve$parameters$mu[1] - curve$parameters$mu[2], curve$parameters$lambda[1] - curve$parameters$lambda[2])
plot(curvePoints ~ plotpoints)
?ets
library(forecast)
?ets
library(caret)
weightEtsFit <- ets(weightTsTrain)
calorieEtsFit <- ets(calTsTrain)
forecastWeights <- forecast(weightEtsFit, 10)
forecastWeights
weightTsTest
forecastCalories <- forecast(calorieEtsFit, 10)
forecastCalories
weightTrain
View(weightTrain)
forestFit <- train(Kilograms ~ YesterdayCalories +LastFiveDaysCalories + LastTenDaysCalories + DaysOld, data=weightTrain, method="rf")
forestFit
forestPredict <- predict(forestFit, newdata=weightTrain)
forestPredict
forestPredict <- predict(forestFit, newdata=weightTest)
forestPredict
weightTest$Kilograms
names(forestFit)
forestFit$finalModel
names(forestFit$finalModel)
forestFit$finalModel$importance
lmFit <- train(Kilograms ~ YesterdayCalories +LastFiveDaysCalories + LastTenDaysCalories + DaysOld, data=weightTrain, method="lm")
lmFit
lmPredict <- predict(lmFit, newdata=weightTrain)
lmPredict
lmPredict <- predict(lmFit, newdata=weightTest)
lmPredict
weigthTest$Kilograms
weigthtTest$Kilograms
weightTest$Kilograms
install.packages("shiny")
install.packages("devtools")
library(devtools)
devtools::install_github("shiny-incubator", "rstudio")
runApp()
library(shiny)
runApp("~")
pwd
getwd()
list.files()
runApp("~/Shiny/")
runApp("~\Shiny\")
runApp("~/Shiny")
runApp("~/Shiny")
runApp("/Shiny")
setwd("D:/Data Science/Data Products/Project/Shiny")
runApp("/")
runApp("/")
runApp("")
runApp("/")
runApp("/")
library(shiny)
runApp()
shiny::runApp()
shiny::runApp()
?renderPlot
shiny::runApp()
?matrixInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?checkboxGroupInput
?paste
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?numericInput
shiny::runApp()
?textOutput
shiny::runApp()
?numericInput
shiny::runApp()
read.csv("GirlWeightStandard.csv")
girlWeight <- read.csv("GirlWeightStandard.csv")
girlLength <- read.csv("GirlLengthStandard.csv")
boyWeight <- read.csv("BoyWeightStandard.csv")
boyLength <- read.csv("BoyLengthStandard.csv")
names(girlWeight)
combined <- cbind()
combined <- cbind(girlWeight$Day, girlWeight$SD0, girlWeight$SD1 - girlWeight$SD0)
combined <- cbind(combined, girlLength$SD0, girlLength$SD1 - girlLength$SD0)
combined <- cbind(combined, boyWeight$SD0, boyWeight$SD1 - boyWeight$SD0)
combined <- cbind(combined, boyLength$SD0, boyLength$SD1 - boyLength$SD0)
names(combined) <- c("Day", "meanGirlWeight", "stDevGirlWeight", "meanGirlLength", "stDevGirlLength", "meanBoyWeight", "stDevBoyWeight", "meanBoyLength", "stDevBoyLength")
head(combined)
names(combined)
names(combined)
class(combined)
data.frame(combined)
df <- data.frame(combined)
head(df)
names(df) <- c("Day", "meanGirlWeight", "stDevGirlWeight", "meanGirlLength", "stDevGirlLength", "meanBoyWeight", "stDevBoyWeight", "meanBoyLength", "stDevBoyLength")
head(df)
shiny::runApp()
shiny::runApp()
head(combined)
head(df)
inTraing <- createDataPartition(y=df$meanGirlWeight, p=0.7, list=FALSE)
training <- df[inTrain, c(1, 2)]
training <- df[inTraing, c(1, 2)]
testing <- df[-inTraing, c(1, 2)]
curve <- gcFitModel(time=training$Day, data=training$meanGirlWeight)
predict <- grompertz(testing)
curve <- gcFitModel(time=training$Day, data=training$meanGirlWeight, control=grofit.control(model=c("gompertz")))
predict <- gompertz(testing$Day, curve$parameters$A[1], curve$parameters$mu[1], curve$parameters$lambda[1])
predict
test
head(test)
head(testing)
predict
test
testing
nrow(predict)
length(predict)
nrow(testing)
plot(curve)
plot(testing$Age, testing$meanGirlWeight)
plot(testing$Age ~testing$meanGirlWeight)
plot(testing$Day ~ testing$meanGirlWeight)
plot(testing$meanGirlWeight ~ testing$Day)
plot(curve)
summary.gcFitModel
?summary.gcFitModel
?plot.gcFitModel
plot.gcFitModel(curve)
plot(rnorm(100),type="l",col=2)lines(rnorm(100),col=3)
plot(rnorm(100),type="l",col=2)
lines(rnorm(100),col=3)
plot(testing$Day ~ testing$meanGirlWeight, type="l", col=2)
plot(testing$meanGirlWeight ~ testing$Day, type="l", col=2)
lines(predict ~ testing$Day, type="l", col=3)
plot(testing$meanGirlWeight ~ testing$Day, col=2)
lines(predict ~ testing$Day, type="l", col=3)
?lines
?par
lines(predict ~ testing$Day, type="l", col=3, lheight=4)
summary.gcFitModel(curve)
params <- summary.gcFitModel(curve)
params
?gompertz
shiny::runApp()
df[150, ]
shiny::runApp()
params
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary(curve)
print(summary(curve))
shiny::runApp()
shiny::runApp()
?round
shiny::runApp()
shiny::runApp()
combined
girlWeight <- read.csv("GirlWeightStandard.csv")
girlLength <- read.csv("GirlLengthStandard.csv")
boyWeight <- read.csv("BoyWeightStandard.csv")
boyLength <- read.csv("BoyLengthStandard.csv")
combined <- cbind(girlWeight$Day, girlWeight$SD0, girlWeight$SD1 - girlWeight$SD0)
combined <- cbind(combined, girlLength$SD0, girlLength$SD1 - girlLength$SD0)
combined <- cbind(combined, boyWeight$SD0, boyWeight$SD1 - boyWeight$SD0)
combined <- cbind(combined, boyLength$SD0, boyLength$SD1 - boyLength$SD0)
combined <- data.frame(combined)
combined
nrow(combined)
names(combined) <- c("Day", "meanGirlWeight", "stDevGirlWeight", "meanGirlLength", "stDevGirlLength", "meanBoyWeight", "stDevBoyWeight", "meanBoyLength", "stDevBoyLength")
startData <- combined[(0:28 * 10) + 1, c(1, 2)]
startData
startData[startData[, 1] >= 180, 2] * 1.05
startData[startData[, 1] >= 180, 2] * startData[startData[, 1] >= 180, 1] / 180
startData[startData[, 1] >= 180, 2] * (startData[startData[, 1] >= 180, 1] - 180) / 100
startData[startData[, 1] >= 180, 2] * (1 + (startData[startData[, 1] >= 180, 1] - 180) / 1000)
shiny::runApp()
?legend
shiny::runApp()
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mattnelson', token='6FC276BDBDB47337FF548A136AEAF6F2', secret='5xDZZPoSldxHYE7BqWYINiCZ8BeC2N9grafVWL6B')
library(shinyapps)
deployApp()
shiny::runApp()
deployApp()
?plot
shiny::runApp()
deployApp()
